{"version":3,"sources":["services/persons.js","components/Filter.js","components/PersonForm.js","components/Persons.js","components/Notification.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","personObject","post","put","id","delete","Filter","handleNameFilter","value","onChange","PersonForm","addPerson","newName","newNumber","handlePhone","handleName","onSubmit","type","Persons","persons","deletePerson","map","person","key","name","number","onClick","Notification","message","text","className","status","App","useState","setPersons","setNewName","setNewNumber","filter","setFilter","setMessage","useEffect","personService","initialPeople","catch","err","console","log","messageSetter","delay","setTimeout","personsToShow","length","p","toLowerCase","indexOf","event","target","preventDefault","found","find","trim","window","confirm","returnedPerson","alert","concat","newList","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ac50a791.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = personObject => {\r\n  const request = axios.post(baseUrl, personObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = personObject => {\r\n  const request = axios.put(`${baseUrl}/${personObject.id}`, personObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst remove = id => {\r\n  return axios.delete(`${baseUrl}/${id}`)\r\n}\r\n\r\nexport default { getAll, create, update, remove }\r\n","import React from 'react'\r\n\r\nconst Filter = ({handleNameFilter, value}) => {\r\n  return (\r\n    <p>filter shown with <input onChange={handleNameFilter} value={value} /></p>\r\n  )\r\n}\r\n\r\nexport default Filter","import React from 'react'\r\n\r\nconst PersonForm = ({addPerson, newName, newNumber, handlePhone, handleName}) => {\r\n  return (\r\n    <form onSubmit={addPerson}>\r\n      <h2>Add new</h2>\r\n      <div>\r\n        name: <input value={newName} onChange={handleName} />\r\n      </div>\r\n      <div>\r\n        number: <input value={newNumber} onChange={handlePhone} />\r\n      </div>\r\n      <div>\r\n        <button type=\"submit\">add</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default PersonForm","import React from 'react'\r\n\r\nconst Persons = ({persons, deletePerson}) => {\r\n  return persons.map(person => <p key={person.id}>{person.name} {person.number} <button onClick={() => deletePerson(person.id)}>Delete</button></p>)\r\n}\r\n\r\nexport default Persons","import React from 'react'\r\n\r\nconst Notification = ({message}) => {\r\n  if (message.text === null) {\r\n    return null\r\n  }\r\n  return (\r\n    <p className={`notification ${message.status}`}>{ message.text }</p>\r\n  )\r\n}\r\n\r\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\n\nimport Filter from './components/Filter';\nimport PersonForm from './components/PersonForm';\nimport Persons from './components/Persons';\nimport Notification from './components/Notification';\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filter, setFilter ] = useState('')\n  const [ message, setMessage ] = useState({text: null})\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPeople => {\n        setPersons(initialPeople)\n      })\n      .catch(err => {\n        console.log(err.response.data);  \n      });\n  }, [])\n\n  const handleName = event => {\n    setNewName(event.target.value)\n  }\n\n  const handlePhone = event => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleNameFilter = event => {\n    setFilter(event.target.value);\n  }\n\n  const addPerson = event => {\n    event.preventDefault();\n    const found = persons.find(person => person.name === newName.trim())\n\n    if (found) {\n\n      if (found.number !== newNumber.trim()) {\n        if (window.confirm(`${newName} is already added to phonebook. Replace the old number with the new one?`)) {\n\n          personService\n            .update({...found, number: newNumber})\n            .then(returnedPerson => {\n              setPersons(persons.map(person => person.id === found.id ? returnedPerson : person))\n              messageSetter(`${newName} was successfully updated.`)\n              setNewName('')\n              setNewNumber('')\n            })\n        }\n      } else {\n        alert(`${newName} is already added to phonebook`)        \n      }\n    } else {\n      const personObject = {name: newName, number: newNumber}\n\n      personService\n        .create(personObject)\n        .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n          messageSetter(`${newName} was successfully added.`)\n          setNewName('')\n          setNewNumber('')\n        })\n        .catch(err => {\n          messageSetter(err.response.data.err, 5000, 'error')\n        })\n    }\n    \n  }\n\n  const deletePerson = id => {\n    const newList = persons.filter(person => person.id !== id)\n    const person = persons.find(person => person.id === id)\n    if (window.confirm(`Delete ${person.name}?`)) {\n      personService\n        .remove(id)\n        .then(() => {\n          messageSetter(`${person.name} was successfully deleted.`)\n          setPersons(newList)\n        })\n        .catch(() => {\n          messageSetter(`Information of ${person.name} has already been removed from the server.`, 5000, 'error')\n          setPersons(newList)\n        })\n    }\n  }\n\n  const messageSetter = (text, delay=5000, status='success') => {\n    setMessage({text, status});\n    setTimeout(() => {\n      setMessage({text: null});\n    }, delay);\n  }\n\n  const personsToShow = filter.length === 0 ? persons : persons.filter(p => p.name.toLowerCase().indexOf(filter.toLowerCase()) !== -1)\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n\n      <Notification message={message} />\n\n      <Filter handleNameFilter={handleNameFilter} value={filter} />\n\n      <PersonForm addPerson={addPerson} newName={newName} newNumber={newNumber} handlePhone={handlePhone} handleName={handleName} />      \n\n      <h2>Numbers</h2>\n      \n      <Persons persons={personsToShow} deletePerson={deletePerson} />\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}